// Generated by CoffeeScript 1.7.1
(function() {
  var Agent, Area, Client, Industry, Project, ProjectType, Sales, User, async, method;

  Agent = require('./models/agentModel');

  Industry = require('./models/industryModel');

  Project = require('./models/projectModel');

  ProjectType = require('./models/projectTypeModel');

  Area = require('./models/areaModel');

  Sales = require('./models/salesModel');

  User = require('./models/userModel');

  Client = require('./models/clientModel');

  async = require('async');

  method = {
    GET: function(req, res, next) {
      var q;
      Project.find().distinct('client', function(err, docs) {
        var c, q, _i, _len, _results;
        q = async.queue(function(task, cb) {
          return task(cb);
        }, 10);
        _results = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          c = docs[_i];
          if (c !== null && c.trim() !== '' && c.trim() !== 'null') {
            _results.push(q.push(function(cb) {
              return Client.create({
                name: c
              }, function(err, doc) {
                return console.log(err, doc);
              });
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return res.send(200);
      Agent.find({}, function(err, docs) {
        var a, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          a = docs[_i];
          _results.push(Project.update({
            'agent.name': a.name
          }, {
            'agent._id': a._id
          }, {
            multi: true
          }, function() {}));
        }
        return _results;
      });
      Industry.find({}, function(err, docs) {
        var i, _fn, _i, _len, _results;
        _fn = function(i) {
          return Project.count({
            'industry.name': i.name
          }, function(err, count) {
            i.projects = count;
            return i.save();
          });
        };
        _results = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          i = docs[_i];
          _fn(i);
          _results.push(Project.update({
            'industry.name': i.name
          }, {
            'industry._id': i._id
          }, {
            multi: true
          }, function() {}));
        }
        return _results;
      });
      ProjectType.find({}, function(err, docs) {
        var i, _fn, _i, _len, _results;
        _fn = function(i) {
          return Project.count({
            'type.name': i.name
          }, function(err, count) {
            i.projects = count;
            return i.save();
          });
        };
        _results = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          i = docs[_i];
          _fn(i);
          _results.push(Project.update({
            'type.name': i.name
          }, {
            'type._id': i._id
          }, {
            multi: true
          }, function() {}));
        }
        return _results;
      });
      q = async.queue(function(task, cb) {
        return task.run(cb);
      }, 10);
      Area.find({
        parentName: null
      }, function(err, docs) {
        var a, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          a = docs[_i];
          _results.push((function(a) {
            Project.count({
              'area.name': a.name
            }, function(err, count) {
              a.projects = count;
              return a.save();
            });
            q.push({
              run: function(cb) {
                return Area.update({
                  parentName: a.name
                }, {
                  parent: a._id
                }, {
                  multi: true
                }, cb);
              }
            });
            return q.push({
              run: function(cb) {
                return Project.update({
                  'area.name': a.name
                }, {
                  'area._id': a._id
                }, {
                  multi: true
                }, cb);
              }
            });
          })(a));
        }
        return _results;
      });
      Area.find({
        parentName: {
          $ne: null
        }
      }, function(err, docs) {
        var a, _fn, _i, _len;
        _fn = function(a) {
          Project.count({
            'company.name': a.name
          }, function(err, count) {
            a.projects = count;
            return a.save();
          });
          return q.push({
            run: function(cb) {
              return Project.update({
                'company.name': a.name
              }, {
                'company._id': a._id
              }, {
                multi: true
              }, cb);
            }
          });
        };
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          a = docs[_i];
          _fn(a);
        }
        return q.drain = function() {
          console.log('分公司去重复');
          return Project.find().distinct('company._id', function(err, docs) {
            return Area.remove({
              $and: [
                {
                  parentName: {
                    $ne: null
                  },
                  _id: {
                    $nin: docs
                  }
                }
              ]
            }, function(err, num) {
              return Sales.find({}, function(err, docs) {
                var s, _fn1, _j, _len1;
                _fn1 = function(s) {
                  return q.push({
                    run: function(cb) {
                      return async.parallel({
                        company: function(cb) {
                          return Area.findOne({
                            parentName: {
                              $ne: null
                            },
                            name: s.company.name
                          }, cb);
                        },
                        manager: function(cb) {
                          return Sales.findOne({
                            name: s.company.manager.name
                          }, cb);
                        }
                      }, function(err, rst) {
                        s.company._id = rst.company._id;
                        s.company.manager._id = rst.manager._id;
                        s.company.parent = rst.company.parent;
                        return s.save(function(err) {
                          return Project.update({
                            'sales.name': s.name
                          }, {
                            'sales._id': s._id,
                            'company.manager._id': rst.manager._id,
                            'company.manager.name': rst.manager.name
                          }, {
                            multi: true
                          }, cb);
                        });
                      });
                    }
                  });
                };
                for (_j = 0, _len1 = docs.length; _j < _len1; _j++) {
                  s = docs[_j];
                  _fn1(s);
                }
                return q.drain = function() {
                  return console.log('销售去重复');
                };
              });
            });
          });
        };
      });
      return res.send(200);
    }
  };

  module.exports = function(req, res, next) {
    var e;
    try {
      return method[req.method](req, res, next);
    } catch (_error) {
      e = _error;
      console.log(e);
      return res.send(405);
    }
  };

}).call(this);

//# sourceMappingURL=install.map
