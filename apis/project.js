// Generated by CoffeeScript 1.7.1
(function() {
  var Area, ClientType, Industry, Project, ProjectType, async, helper, method, _;

  Area = require('../models/areaModel');

  Industry = require('../models/industryModel');

  Project = require('../models/projectModel');

  ProjectType = require('../models/projectTypeModel');

  ClientType = require('../models/clientModel');

  _ = require('underscore');

  async = require('async');

  helper = require('../commons/helper');

  method = {
    GET: function(req, res, next) {
      var condition, keyword, num, opts, page, query, _id;
      if (_id = req.params._id) {
        return Project.findById(_id, function(err, doc) {
          if (err) {
            return next(err);
          }
          return res.send(doc);
        });
      } else if (req.query.type === 'client') {
        return Project.find({
          $and: [
            {
              'client._id': req.query.kw,
              contractNum: null
            }
          ]
        }, null, {
          limit: 10
        }, function(err, docs) {
          if (err) {
            return next(err);
          }
          return res.send(docs);
        });
      } else if (req.query.type === 'search') {
        keyword = new RegExp(req.query.keyword);
        req.query.condition = {
          $or: [
            {
              name: keyword
            }, {
              tags: keyword
            }
          ]
        };
        return helper.getPage(Project, req.query, function(err, data) {
          if (err) {
            return next(err);
          }
          return res.send(data);
        });
      } else {
        condition = JSON.parse((query = req.query).condition);
        if (req.user.role === 'supporter') {
          condition['supporter._id'] = req.user._id;
        }
        if (condition.sOrderDate) {
          condition.orderDate = condition.orderDate || {};
          condition.orderDate.$gte = condition.sOrderDate;
          delete condition.sOrderDate;
        }
        if (condition.eOrderDate) {
          condition.orderDate = condition.orderDate || {};
          condition.orderDate.$lte = condition.eOrderDate;
          delete condition.eOrderDate;
        }
        num = query.num || 10;
        page = query.page || 1;
        opts = {
          skip: (page - 1) * num,
          limit: num,
          sort: '-_id'
        };
        return async.auto({
          count: function(cb) {
            return Project.count(condition, cb);
          },
          list: function(cb) {
            return Project.find(condition, null, opts, cb);
          }
        }, function(err, rst) {
          if (err) {
            return next(err);
          }
          return res.send({
            count: rst.count,
            totalPage: Math.ceil(rst.count / num),
            list: rst.list
          });
        });
      }
    },
    PUT: function(req, res, next) {
      var comment, _id;
      if (!(_id = req.params._id)) {
        return res.send(400);
      }
      _id = req.body._id;
      delete req.body._id;
      if (req.body.comment) {
        comment = {
          content: req.body.content,
          creator: req.user.realname,
          date: new Date(),
          status: req.body.status
        };
        return Project.update({
          _id: _id
        }, {
          $push: {
            comments: comment
          }
        }, function(err, num) {
          if (err) {
            return next(err);
          }
          return res.send(comment);
        });
      } else {
        return Project.findById(_id, function(err, doc) {
          if (!doc) {
            return res.send(404);
          }
          if (req.body.area) {
            Area.findByIdAndUpdate(req.body.area._id, {
              $inc: {
                projects: 1
              }
            }, function() {});
            Area.findByIdAndUpdate(doc.area._id, {
              $inc: {
                projects: -1
              }
            }, function() {});
          }
          if (req.body.company) {
            Area.findByIdAndUpdate(req.body.company._id, {
              $inc: {
                projects: 1
              }
            }, function() {});
            Area.findByIdAndUpdate(doc.company._id, {
              $inc: {
                projects: -1
              }
            }, function() {});
          }
          if (req.body.industry) {
            Industry.findByIdAndUpdate(req.body.industry._id, {
              $inc: {
                projects: 1
              }
            }, function() {});
            Industry.findByIdAndUpdate(doc.industry._id, {
              $inc: {
                projects: -1
              }
            }, function() {});
          }
          if (req.body.type) {
            ProjectType.findByIdAndUpdate(req.body.type._id, {
              $inc: {
                projects: 1
              }
            }, function() {});
            ProjectType.findByIdAndUpdate(doc.type._id, {
              $inc: {
                projects: -1
              }
            }, function() {});
          }
          if (req.body.status) {
            if (req.body.status === '上线') {
              doc.online.date = new Date();
              doc.online.reviewer = req.user;
            }
            doc.comments.push({
              content: req.body.status,
              creator: req.user.realname,
              status: doc.status
            });
          }
          if (req.body.supporter) {
            doc.comments.push({
              content: '客服更改为：' + req.body.supporter.realname,
              creator: req.user.realname,
              status: doc.status
            });
          }
          _.extend(doc, req.body);
          return doc.save(function(err) {
            if (err) {
              return next(err);
            }
            return res.send(200);
          });
        });
      }
    },
    POST: function(req, res, next) {
      var doc;
      delete req.body._id;
      doc = new Project(req.body);
      doc.comments.push({
        content: '创建项目, 客服：' + (doc.supporter && doc.supporter.realname || ''),
        creator: req.user.realname,
        status: doc.status
      });
      return doc.save(function(err, doc) {
        if (err) {
          return next(err);
        }
        if (req.body.area) {
          Area.findByIdAndUpdate(req.body.area._id, {
            $inc: {
              projects: 1
            }
          }, function() {});
        }
        if (req.body.company) {
          Area.findByIdAndUpdate(req.body.company._id, {
            $inc: {
              projects: 1
            }
          }, function() {});
        }
        if (req.body.industry) {
          Industry.findByIdAndUpdate(req.body.industry._id, {
            $inc: {
              projects: 1
            }
          }, function() {});
        }
        if (req.body.type) {
          ProjectType.findByIdAndUpdate(req.body.type._id, {
            $inc: {
              projects: 1
            }
          }, function() {});
        }
        return res.send(200);
      });
    },
    DELETE: function(req, res, next) {
      var _id;
      if (!(_id = req.params._id)) {
        res.send(400);
      }
      return Project.findByIdAndRemove(_id, function(err) {
        if (err) {
          return next(err);
        }
        return res.send(200);
      });
    }
  };

  module.exports = function(req, res, next) {
    var e;
    try {
      return method[req.method](req, res, next);
    } catch (_error) {
      e = _error;
      console.log(e);
      return res.send(405);
    }
  };

}).call(this);

//# sourceMappingURL=project.map
