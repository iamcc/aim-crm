// Generated by CoffeeScript 1.7.1
(function() {
  var Finance, Project, async, fs, helper, method, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Finance = require('../models/financeModel');

  Project = require('../models/projectModel');

  async = require('async');

  helper = require('../commons/helper');

  _ = require('underscore');

  fs = require('fs');

  method = {
    GET: function(req, res, next) {
      if (req.params._id) {
        return Finance.findById(req.params._id).populate('projects').exec(function(err, doc) {
          if (err) {
            return next(err);
          }
          return res.send(doc);
        });
      } else {
        switch (req.query.type) {
          case 'all':
            req.query.condition = {};
            break;
          case 'unpay':
            req.query.condition = {
              balance: {
                $gt: 0
              }
            };
            break;
          case 'paied':
            req.query.condition = {
              balance: 0
            };
            break;
          default:
            req.query.condition = {};
        }
        return helper.getPage(Finance, req.query, function(err, data) {
          if (err) {
            return next(err);
          }
          return res.send(data);
        });
      }
    },
    POST: function(req, res, next) {
      var newDoc, uploadFolder;
      delete req.body._id;
      if (req.params._id) {
        if (req.query.act === 'upload') {
          uploadFolder = __dirname + '/../public/uploads/' + req.params._id + '/';
          if (!fs.existsSync(uploadFolder)) {
            fs.mkdirSync(uploadFolder);
          }
          fs.renameSync(req.files.file.path, uploadFolder + req.files.file.name);
          return res.send('/uploads/' + req.params._id + '/' + req.files.file.name);
        } else {
          return Finance.findById(req.params._id, function(err, doc) {
            var newPids, oldPids, p, pid, _i, _j, _len, _len1, _ref;
            if (err) {
              return next(err);
            }
            if (!doc) {
              return res.send(404);
            }
            oldPids = (function() {
              var _i, _len, _ref, _results;
              _ref = doc.projects;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                p = _ref[_i];
                _results.push(p.toString());
              }
              return _results;
            })();
            _.extend(doc, req.body);
            newPids = [];
            _ref = doc.projects;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              pid = _ref[_i];
              newPids.push(pid.toString());
              Project.update({
                _id: pid
              }, {
                contractNum: doc.contract.num
              }, function(err, doc) {
                return console.log(err, doc);
              });
            }
            for (_j = 0, _len1 = oldPids.length; _j < _len1; _j++) {
              pid = oldPids[_j];
              if (__indexOf.call(newPids, pid) < 0) {
                Project.update({
                  _id: pid
                }, {
                  contractNum: null
                }, function(err, doc) {
                  return console.log(err, doc);
                });
              }
            }
            return doc.save(function(err) {
              if (err) {
                return next(err);
              }
              return res.send(200);
            });
          });
        }
      } else {
        newDoc = new Finance(req.body);
        return newDoc.save(function(err) {
          var pid, _i, _len, _ref;
          if (err) {
            return next(err);
          }
          _ref = newDoc.projects;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pid = _ref[_i];
            Project.update({
              _id: pid
            }, {
              contractNum: newDoc.contract.num
            }, function(err, doc) {
              return console.log(err, doc);
            });
          }
          return res.send(200);
        });
      }
    }
  };

  module.exports = function(req, res, next) {
    var e, _ref;
    try {
      if ((_ref = req.user.role) !== 'finance' && _ref !== 'admin') {
        return res.send(403);
      }
      return method[req.method](req, res, next);
    } catch (_error) {
      e = _error;
      console.log(e);
      return res.send(405);
    }
  };

}).call(this);

//# sourceMappingURL=finance.map
