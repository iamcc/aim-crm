// Generated by CoffeeScript 1.7.1
(function() {
  var controller, initPage, nextPages, prePages;

  controller = angular.module('app.controllers', []).controller;

  initPage = function(data) {
    var _i, _ref, _ref1, _results;
    if (!data) {
      return;
    }
    if (data.totalPage === 0) {
      return;
    }
    data.curPage = 1;
    data.minPage = 1;
    data.pageNum = 5;
    data.maxPage = data.minPage + data.pageNum - 1;
    if (data.maxPage > data.totalPage) {
      data.maxPage = data.totalPage;
    }
    if (data.maxPage < data.minPage) {
      data.maxPage = data.minPage;
    }
    return data.pageArr = (function() {
      _results = [];
      for (var _i = _ref = data.minPage, _ref1 = data.maxPage; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
  };

  prePages = function(data) {
    var _i, _ref, _ref1, _results;
    if (!data) {
      return;
    }
    if (data.minPage > 1) {
      data.minPage -= data.pageNum;
      data.maxPage = data.minPage + data.pageNum - 1;
      return data.pageArr = (function() {
        _results = [];
        for (var _i = _ref = data.minPage, _ref1 = data.maxPage; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
    }
  };

  nextPages = function(data) {
    var _i, _ref, _ref1, _results;
    if (!data) {
      return;
    }
    if (data.maxPage < data.totalPage) {
      data.minPage += data.pageNum;
      data.maxPage = data.minPage + data.pageNum - 1;
      if (data.maxPage > data.totalPage) {
        data.maxPage = data.totalPage;
      }
      return data.pageArr = (function() {
        _results = [];
        for (var _i = _ref = data.minPage, _ref1 = data.maxPage; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
    }
  };

  controller('userCtrl', [
    '$scope', 'Project', 'ProjectType', 'Industry', 'Agent', 'User', 'Area', 'Sales', '$routeParams', '$location', function($scope, Project, ProjectType, Industry, Agent, User, Area, Sales, $routeParams, $location) {
      var getStatusLabel;
      getStatusLabel = function(status) {
        switch (status) {
          case '初始资料':
          case '首次催单':
          case '二次催单':
            return 'label-info';
          case '搁置':
          case '毁约':
            return 'label-danger';
          case '录入':
            return 'label-warning';
          case '完成':
            return 'label-primary';
          case '上线':
            return 'label-success';
          default:
            return 'label-default';
        }
      };
      $scope.showCount = function(item) {
        $scope.isShowFilter = false;
        if (item === $scope.curCountItem) {
          $scope.isShowCount = false;
          return $scope.curCountItem = null;
        } else {
          $scope.isShowCount = true;
          $scope.curCountItem = item;
          switch (item) {
            case 'area':
              return $scope.counts = $scope.areas;
            case 'company':
              return $scope.counts = $scope.companies;
            case 'industry':
              return $scope.counts = $scope.industries;
            case 'type':
              return $scope.counts = $scope.projectTypes;
          }
        }
      };
      $scope.goUrl = function(url) {
        return $location.path(url);
      };
      $scope.showFilter = function() {
        $scope.isShowCount = false;
        $scope.curCountItem = null;
        return $scope.isShowFilter = !$scope.isShowFilter;
      };
      $scope.condition = {};
      $scope.prePages = function() {
        return prePages(this.projectData);
      };
      $scope.nextPages = function() {
        return nextPages(this.projectData);
      };
      $scope.goPage = function(page) {
        var k, param, self, v, _ref;
        self = this;
        _ref = $scope.condition;
        for (k in _ref) {
          v = _ref[k];
          if (!v) {
            delete $scope.condition[k];
          }
        }
        param = {
          condition: $scope.condition || {}
        };
        if ($routeParams.area) {
          param.condition['area._id'] = $routeParams.area;
        }
        if ($routeParams.company) {
          param.condition['company._id'] = $routeParams.company;
        }
        if ($routeParams.industry) {
          param.condition['industry._id'] = $routeParams.industry;
        }
        if ($routeParams.type) {
          param.condition['type._id'] = $routeParams.type;
        }
        if (page) {
          param.page = page;
          return Project.get(param, function(data) {
            var p, _i, _len, _ref1, _results;
            self.projectData.curPage = page;
            self.projectData.list = data.list;
            _ref1 = data.list;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              p = _ref1[_i];
              _results.push(p.statusLabel = getStatusLabel(p.status));
            }
            return _results;
          });
        } else {
          return self.projectData = Project.get(param, function(data) {
            var p, _i, _len, _ref1, _results;
            initPage(data);
            _ref1 = data.list;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              p = _ref1[_i];
              _results.push(p.statusLabel = getStatusLabel(p.status));
            }
            return _results;
          });
        }
      };
      $scope.showEdit = function(event, project) {
        if ($scope.userinfo.role === 'finance') {
          return;
        }
        if ($(event.target).parent().hasClass('edit')) {
          return;
        }
        $scope.oldProject = angular.copy(project);
        $(event.target).find('.view').hide();
        $(event.target).find('.edit').show();
        $(event.target).find('.edit').children().focus();
      };
      $scope.addComment = function(project) {
        $scope.comments = project.comments;
        return $scope.newComment = {
          _id: project._id,
          status: project.status,
          comment: 1
        };
      };
      $scope.saveComment = function(form) {
        if (form.$invalid || !$scope.newComment.content.trim()) {
          return;
        }
        return Project.update($scope.newComment, function(data) {
          $scope.comments.push(data);
          return $scope.newComment.content = '';
        });
      };
      $scope.saveProject = function() {
        var p;
        p = JSON.parse(angular.toJson(this.newProject));
        if (!p.sales || !p.sales._id) {
          return alert('请选择销售');
        }
        if (!p.client || !p.client._id) {
          return alert('请填写客户全称');
        }
        p.company = p.sales.company;
        p.area = $scope.areas.filter(function(a) {
          return a._id === p.company.parent;
        })[0];
        return Project.save(p, function() {
          $('#addModal').modal('hide');
          $scope.newProject = null;
          return $scope.goPage();
        }, function(err) {
          return alert(err.data);
        });
      };
      $scope.updateStatus = function(p, status) {
        return Project.update({
          _id: p._id,
          status: status
        }, function() {
          p.comments.push({
            content: status,
            creator: $scope.userinfo.realname,
            date: new Date(),
            status: p.status
          });
          p.status = status;
          p.statusLabel = getStatusLabel(status);
          if (status === '上线') {
            return p.online = {
              date: new Date(),
              reviewer: $scope.userinfo
            };
          }
        });
      };
      $scope.update = function(event, project, field) {
        var param;
        $(event.target).closest('.edit').prev().show();
        $(event.target).closest('.edit').hide();
        param = {
          _id: project._id
        };
        param[field] = project[field];
        if (project[field] && project[field].hasOwnProperty('_id')) {
          if (!$scope.oldProject[field] || $scope.oldProject[field]._id !== project[field]._id) {
            if (field === 'sales') {
              param.company = project[field].company;
              param.area = $scope.areas.filter(function(a) {
                return a._id === param.company.parent;
              })[0];
            }
            return Project.update(param);
          }
        } else if ($scope.oldProject[field] !== project[field]) {
          return Project.update(param);
        }
      };
      $scope["export"] = function() {
        var k, param, self, v, _ref;
        self = this;
        _ref = $scope.condition;
        for (k in _ref) {
          v = _ref[k];
          if (!v) {
            delete $scope.condition[k];
          }
        }
        param = {
          condition: $scope.condition || {}
        };
        if ($routeParams.area) {
          param.condition['area._id'] = $routeParams.area;
        }
        if ($routeParams.company) {
          param.condition['company._id'] = $routeParams.company;
        }
        if ($routeParams.industry) {
          param.condition['industry._id'] = $routeParams.industry;
        }
        if ($routeParams.type) {
          param.condition['type._id'] = $routeParams.type;
        }
        window.open('/api/export?condition=' + JSON.stringify(param.condition));
      };
      return $scope.goPage();
    }
  ]);

  controller('loginCtrl', [
    '$scope', '$http', '$rootScope', '$location', 'User', function($scope, $http, $rootScope, $location, User) {
      return $scope.login = function(e, form) {
        var $btn;
        if (form.$invalid) {
          return;
        }
        $scope.isError = false;
        $btn = $(e.target);
        $btn.button('loading');
        return User.login({
          uname: $scope.uname,
          pwd: $scope.pwd
        }, function(data) {
          $rootScope.userinfo = data;
          return $location.path('/');
        }, function(err) {
          $btn.button('reset');
          return $scope.isError = true;
        });
      };
    }
  ]);

  controller('settingCtrl', [
    '$rootScope', '$scope', 'User', 'Area', 'Sales', 'Industry', 'Agent', 'ProjectType', 'Client', '$routeParams', '$location', '$route', function($rootScope, $scope, User, Area, Sales, Industry, Agent, ProjectType, Client, $routeParams, $location, $route) {
      var $tabs, $userinfo, lastRoute;
      User.checkLogin();
      $tabs = $scope.tabs = [];
      $userinfo = $scope.userinfo;
      lastRoute = $route.current;
      $scope.$on('$locationChangeSuccess', function() {
        if ($route.current.$$route.controller === 'settingCtrl') {
          return $route.current = lastRoute;
        }
      });
      $tabs[0] = {
        save: function(e, form) {
          var $btn, self;
          if (form.$invalid) {
            return;
          }
          if (this.pwd !== this.pwd2) {
            return this.error = '两次密码不一样';
          }
          this.error = '';
          self = this;
          $btn = $(e.target);
          $btn.button('loading');
          return User.setPwd({
            _id: $userinfo._id,
            pwd: this.pwd
          }, function(data) {
            self.success = '修改成功';
            self.error = '';
            return $btn.button('reset');
          }, function(err) {
            self.success = '';
            self.error = '修改失败';
            $btn.button('reset');
            return console.log(err);
          });
        }
      };
      $tabs[1] = {
        selectUser: function() {
          var _id;
          _id = this.user._id;
          return this.user = angular.copy(this.allUsers.list.filter(function(u) {
            return u._id === _id;
          })[0]);
        },
        updateRealname: function(e) {
          var $btn, self;
          self = this;
          $btn = $(e.target);
          $btn.button('loading');
          return User.setRealname(this.user, function() {
            self.success = '操作成功';
            self.error = '';
            self.allUsers.list.filter(function(u) {
              return u._id === self.user._id;
            })[0].realname = self.user.realname;
            return $btn.button('reset');
          }, function(err) {
            self.success = '';
            self.error = '操作失败';
            console.log(err);
            return $btn.button('reset');
          });
        },
        updateRole: function(e) {
          var $btn, self;
          self = this;
          $btn = $(e.target);
          $btn.button('loading');
          return User.setRole(this.user, function() {
            self.success = '操作成功';
            self.error = '';
            self.allUsers.list.filter(function(u) {
              return u._id === self.user._id;
            })[0].role = self.user.role;
            return $btn.button('reset');
          }, function(err) {
            self.success = '';
            self.error = '操作失败';
            console.log(err);
            return $btn.button('reset');
          });
        },
        resetPwd: function(e) {
          var $btn, self;
          self = this;
          $btn = $(e.target);
          if (confirm('密码将被重置为123456')) {
            $btn.button('loading');
            return User.resetPwd(this.user, function() {
              self.success = '操作成功';
              self.error = '';
              return $btn.button('reset');
            }, function(err) {
              self.success = '';
              self.error = '操作失败';
              console.log(err);
              return $btn.button('reset');
            });
          }
        }
      };
      $tabs[2] = {
        save: function(e, form) {
          var $btn, self;
          if (form.$invalid) {
            return;
          }
          self = this;
          $btn = $(e.target);
          $btn.button('loading');
          return User.save(this.newUser, function(data) {
            self.success = '添加成功';
            self.error = '';
            return $btn.button('reset');
          }, function(err) {
            self.success = '';
            self.error = err.data;
            return $btn.button('reset');
          });
        }
      };
      $tabs[3] = {
        changeArea: function() {
          this.selectedSales.company = null;
          this.salesData = null;
          return Area.get({
            parent: this.selectedSales.area._id,
            num: 100
          }, function(data) {
            return $tabs[3].selectedSales.companies = data.list;
          });
        },
        changeCompany: function() {
          this.salesData = Sales.query({
            company: this.selectedSales.company._id
          });
          return this.selectedSales.company = angular.copy(this.selectedSales.companies.filter(function(obj) {
            return obj._id === $tabs[3].selectedSales.company._id;
          })[0]);
        },
        changeManager: function() {
          var self;
          self = this;
          return this.selectedSales.company.manager = angular.copy(this.selectedSales.company.managers.filter(function(m) {
            return m._id === self.selectedSales.company.manager._id;
          })[0]);
        },
        addSales: function() {
          return this.selectedSales = {
            area: angular.copy(this.selectedSales && this.selectedSales.area),
            company: angular.copy(this.selectedSales && this.selectedSales.company),
            companies: angular.copy(this.selectedSales && this.selectedSales.companies)
          };
        },
        selectSales: function(sales) {
          var mid;
          sales.area = this.selectedSales.area;
          sales.companies = this.selectedSales.companies;
          mid = sales.company.manager && sales.company.manager._id;
          sales.company = sales.companies.filter(function(c) {
            return c._id === sales.company._id;
          })[0];
          if (mid) {
            sales.company.manager = sales.company.managers.filter(function(m) {
              return m._id === mid;
            })[0];
          }
          return this.selectedSales = angular.copy(sales);
        },
        save: function(form) {
          if (form.$invalid) {
            return;
          }
          return Sales.save(this.selectedSales, function() {
            $('#salesModal').modal('hide');
            return $tabs[3].salesData = Sales.query({
              company: $tabs[3].selectedSales.company._id
            });
          }, function(err) {
            console.log(err);
            return alert('Error');
          });
        }
      };
      $tabs[4] = {
        selectArea: function(area) {
          this.selectedArea = angular.copy(area);
          return this.companyData = Area.get({
            parent: area._id
          }, function(data) {
            return initPage(data);
          });
        },
        addArea: function(parent) {
          return this.selectedArea = {
            parent: parent,
            managers: []
          };
        },
        editArea: function(area) {
          return this.selectedArea = angular.copy(area);
        },
        addManager: function() {
          if (!(this.newManager && this.newManager._id)) {
            return;
          }
          this.selectedArea.managers.push(angular.copy(this.newManager));
          return this.newManager = null;
        },
        prePages: prePages,
        nextPages: nextPages,
        goAreaPage: function(data, page) {
          data.curPage = page;
          return Area.get({
            page: page
          }, function(docs) {
            return data.list = docs.list;
          });
        },
        goCompanyPage: function(data, page) {
          data.curPage = page;
          return Area.get({
            parent: this.selectedArea._id,
            page: page
          }, function(docs) {
            return data.list = docs.list;
          });
        },
        save: function() {
          var self;
          self = this;
          return Area.save(this.selectedArea, function() {
            $scope.selectMenu(4);
            $('#areaModal').modal('hide');
            return self.selectedArea = null;
          }, function(err) {
            console.log(err);
            return alert('错误');
          });
        }
      };
      $tabs[5] = {
        del: function(i) {
          $tabs[5].error = '';
          if (confirm('确定删除？')) {
            return Industry["delete"](i, function() {
              return $tabs[5].industries = Industry.query();
            }, function(err) {
              return $tabs[5].error = err.data;
            });
          }
        },
        save: function(form) {
          $tabs[5].error = '';
          if (form.$invalid) {
            return;
          }
          return Industry.save(this.newIndustry, function() {
            $tabs[5].industries = Industry.query();
            return $tabs[5].newIndustry = null;
          }, function(err) {
            return $tabs[5].error = err.data;
          });
        }
      };
      $tabs[6] = {
        prePages: prePages,
        nextPages: nextPages,
        goPage: function(page) {
          if (page) {
            return Agent.get({
              page: page
            }, function(data) {
              return $tabs[6].agentData.list = data.list;
            });
          } else {
            return this.agentData = Agent.get({}, function(data) {
              return initPage(data);
            });
          }
        },
        add: function() {
          return this.newAgent = null;
        },
        edit: function(agent) {
          return this.newAgent = angular.copy(agent);
        },
        save: function(form) {
          if (form.$invalid) {
            return;
          }
          return Agent.save(this.newAgent, function() {
            $('#agentModal').modal('hide');
            $tabs[6].newAgent = null;
            return $tabs[6].goPage();
          }, function(err) {
            return alert(err.data);
          });
        }
      };
      $tabs[7] = {
        load: function() {
          return this.projectTypes = ProjectType.query();
        },
        del: function(p) {
          if (confirm('确定删除？')) {
            $tabs[7].error = '';
            return ProjectType["delete"](p, function() {
              $tabs[7].newType = null;
              return $tabs[7].load();
            }, function(err) {
              return $tabs[7].error = err.data;
            });
          }
        },
        save: function(form) {
          if (form.$invalid) {
            return;
          }
          $tabs[7].error = '';
          return ProjectType.save(this.newType, function() {
            $tabs[7].newType = null;
            return $tabs[7].load();
          }, function(err) {
            return $tabs[7].error = err.data;
          });
        }
      };
      $tabs[8] = {
        model: Client,
        load: function() {
          return this.clientData = Client.get(function() {
            return setTimeout(function() {
              return $rootScope.$broadcast('page:init');
            }, 500);
          });
        },
        add: function() {
          return this.newClient = {};
        },
        edit: function(c) {
          return this.newClient = angular.copy(c);
        },
        save: function(e, form) {
          if (form.$invalid) {
            return;
          }
          Client.save(this.newClient, function() {
            return $tabs[8].load();
          });
          $(e).modal('hide');
        }
      };
      $scope.selectMenu = function(id) {
        $location.path('/setting/' + id);
        $scope.selectedMenu = id;
        switch (id) {
          case 0:
            return console.log;
          case 1:
            return $tabs[1].allUsers = User.get({
              num: 100
            });
          case 2:
            return console.log;
          case 3:
            return $tabs[3].areaData = Area.get({
              num: 100
            }, function(data) {
              return initPage(data);
            });
          case 4:
            $tabs[4].areaData = Area.get({}, function(data) {
              return initPage(data);
            });
            return Area.get({
              num: 100
            }, function(data) {
              return $tabs[4].allAreas = data.list;
            });
          case 5:
            return $tabs[5].industries = Industry.query();
          case 6:
            return $tabs[6].goPage();
          case 7:
            return $tabs[7].load();
          case 8:
            return $tabs[8].load();
        }
      };
      return $scope.selectMenu(parseInt($routeParams.tab) || 0);
    }
  ]);

  controller('financeCtrl', [
    '$scope', '$timeout', '$filter', '$http', 'Finance', 'Project', function($scope, $timeout, $filter, $http, Finance, Project) {
      var getPanelTitle, sumPrice;
      getPanelTitle = function(tab) {
        switch (tab) {
          case 'all':
            return '全部';
          case 'unpay':
            return '未付款';
          case 'paied':
            return '已付款';
        }
      };
      sumPrice = function(contract) {
        contract.contract.price = 0;
        angular.forEach(contract.projects, function(p) {
          return contract.contract.price += p.price;
        });
        contract.balance = contract.contract.price;
        return angular.forEach(contract.payments, function(p) {
          return contract.balance -= p.money;
        });
      };
      $scope.add = function() {
        this.contract = {
          contract: {
            attachments: []
          },
          projects: [],
          payments: [],
          invoices: []
        };
        return this.modalTitle = '新增合同';
      };
      $scope.edit = function(id) {
        $scope.contract = Finance.get({
          _id: id
        }, function(data) {
          data.contract.date = $filter('date')(data.contract.date, 'yyyy-MM-dd');
          return data.contract.recvDate = $filter('date')(data.contract.recvDate, 'yyyy-MM-dd');
        });
        return $scope.modalTitle = '修改合同';
      };
      $scope.save = function() {
        angular.forEach(this.contract.projects, function(p, i) {
          return $scope.contract.projects[i] = p._id;
        });
        return Finance.save(this.contract, function(data) {
          $('#addModal').modal('hide');
          return $scope.goPage();
        }, function(err) {
          console.log(err);
          return $scope.error = err.data;
        });
      };
      $scope.showTab = function(tab) {
        this.panelTitle = getPanelTitle(tab);
        this.tab = tab;
        return this.goPage();
      };
      $scope.addImg = function() {
        $('#file').click();
      };
      $scope.selectImg = function(files) {
        var formData;
        formData = new FormData;
        formData.append('file', files[0]);
        return $http.post("/api/finance/" + this.contract._id + "?act=upload", formData, {
          headers: {
            'Content-Type': void 0
          },
          transformRequest: angular.identity
        }).success(function(resp) {
          return $scope.contract.contract.attachments.push(resp);
        });
      };
      $scope.prePages = function() {
        return prePages(this.financeData);
      };
      $scope.nextPages = function() {
        return nextPages(this.financeData);
      };
      $scope.goPage = function(page) {
        var params;
        params = {
          page: page || ($scope.financeData && $scope.financeData.curPage) || 1,
          type: $scope.tab
        };
        return $scope.financeData = Finance.get(params, function(data) {
          return initPage(data);
        });
      };
      $scope.getProjects = function() {
        if (!$scope.contract.contract.client || !$scope.contract.contract.client._id) {
          return;
        }
        return Project.query({
          type: 'client',
          kw: $scope.contract.contract.client._id
        }, function(data) {
          var p, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            p = data[_i];
            _results.push($scope.addProject(p));
          }
          return _results;
        });
      };
      $scope.addProject = function(project) {
        this.contract.projects.push(angular.copy(project));
        return sumPrice($scope.contract);
      };
      $scope.delProject = function(i) {
        this.contract.projects.splice(i, 1);
        if (this.contract.projects.length === 0) {
          this.contract.contract.client = '';
        }
        return sumPrice(this.contract);
      };
      $scope.addPayment = function() {
        this.payment.date = this.payment.date || new Date;
        this.contract.payments.push(angular.copy(this.payment));
        sumPrice(this.contract);
        return this.payment = null;
      };
      $scope.delPayment = function(i) {
        this.contract.payments.splice(i, 1);
        return sumPrice(this.contract);
      };
      $scope.addInvoice = function() {
        this.invoice.date = this.invoice.date || new Date;
        this.contract.invoices.push(angular.copy(this.invoice));
        return this.invoice = null;
      };
      $scope.delInvoice = function(i) {
        return this.contract.invoices.splice(i, 1);
      };
      return $scope.showTab('all');
    }
  ]);

}).call(this);

//# sourceMappingURL=controllers.map
