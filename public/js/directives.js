// Generated by CoffeeScript 1.7.1
angular.module('app.directives', []).directive('typeahead', function() {
  return {
    restrict: 'E',
    transclude: 'element',
    replace: true,
    scope: {
      name: '@',
      valueKey: '@',
      remote: '@',
      model: '=model',
      datum: '=',
      callback: '&'
    },
    template: '<input type="text" class="form-control" ng-model="model">',
    link: function(scope, elem, attrs) {
      var $el, source;
      $el = $(elem);
      source = new Bloodhound({
        datumTokenizer: function(d) {
          return Bloodhound.tokenizers.whitespace(d.value);
        },
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: scope.remote
      });
      source.initialize();
      $el.typeahead(null, {
        displayKey: scope.valueKey,
        source: source.ttAdapter()
      });
      return $el.on('typeahead:selected', function(obj, datum) {
        return scope.$apply(function() {
          scope.datum = datum;
          if (scope.callback && scope.callback()) {
            return scope.callback().bind(scope.$parent)(datum);
          }
        });
      });
    }
  };
}).directive('page', function($rootScope) {
  return {
    restrict: 'E',
    transclude: 'element',
    replace: true,
    scope: {
      data: '=',
      model: '=',
      goPage: '&'
    },
    templateUrl: '/partials/page.html',
    link: function(scope, elem, attrs) {
      var initPage;
      initPage = function(data) {
        var _i, _ref, _ref1, _results;
        if (!data) {
          return;
        }
        if (data.totalPage === 0) {
          return;
        }
        data.curPage = 1;
        data.minPage = 1;
        data.pageNum = 5;
        data.maxPage = data.minPage + data.pageNum - 1;
        if (data.maxPage > data.totalPage) {
          data.maxPage = data.totalPage;
        }
        if (data.maxPage < data.minPage) {
          data.maxPage = data.minPage;
        }
        return data.pageArr = (function() {
          _results = [];
          for (var _i = _ref = data.minPage, _ref1 = data.maxPage; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      };
      scope.prePages = function() {
        var data, _i, _ref, _ref1, _results;
        data = scope.data;
        if (!data) {
          return;
        }
        if (data.minPage > 1) {
          data.minPage -= data.pageNum;
          data.maxPage = data.minPage + data.pageNum - 1;
          return data.pageArr = (function() {
            _results = [];
            for (var _i = _ref = data.minPage, _ref1 = data.maxPage; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
        }
      };
      scope.nextPages = function() {
        var data, _i, _ref, _ref1, _results;
        data = scope.data;
        if (!data) {
          return;
        }
        if (data.maxPage < data.totalPage) {
          data.minPage += data.pageNum;
          data.maxPage = data.minPage + data.pageNum - 1;
          if (data.maxPage > data.totalPage) {
            data.maxPage = data.totalPage;
          }
          return data.pageArr = (function() {
            _results = [];
            for (var _i = _ref = data.minPage, _ref1 = data.maxPage; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this);
        }
      };
      if (!scope.goPage()) {
        scope.goPage = function(p) {
          return scope.model.get({
            page: p
          }, function(data) {
            scope.data.curPage = p;
            return scope.data.list = data.list;
          });
        };
      }
      return $rootScope.$on('page:init', function() {
        return scope.$apply(function() {
          return initPage(scope.data);
        });
      });
    }
  };
});

//# sourceMappingURL=directives.map
